{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","Avatar","map","user","i","key","Scroll","props","style","overflowY","border","height","children","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","this","filterAvatar","filter","eachAvatar","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4MAaeA,EAXJ,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GACrB,OACA,yBAAKC,UAAU,uDACf,yBAAKC,IAAI,UAASC,IAAG,kDAA6CH,EAA7C,mBACrB,6BACA,4BAAKF,GACL,2BAAIC,MCgBQK,EApBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAChB,OACC,6BAECA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OACC,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCLRW,EAPF,SAACC,GACb,OACC,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,UAClEJ,EAAMK,WCSKC,EAbE,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC9B,OAEC,yBAAKnB,GAAG,OACP,2BACAC,UAAU,mCACVmB,KAAK,SACLC,YAAY,sBACZC,SAAUH,MCkCEI,G,wDApCd,aAAc,IAAD,8BACZ,gBAYDC,eAAe,SAACC,GACf,EAAKC,SAAS,CAACR,YAAaO,EAAME,OAAOC,SAZzC,EAAKC,MAAM,CACXxB,OAAQ,GACRa,YAAY,IAJA,E,gEAOO,IAAD,OAClBY,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UACzBF,MAAK,SAAAE,GAAQ,EAAKP,SAAS,CAACrB,OAAO4B,S,+BAO9B,IAAD,EACmBC,KAAKL,MAAzBxB,EADC,EACDA,OAAOa,EADN,EACMA,YACPiB,EAAa9B,EAAO+B,QAAO,SAAAC,GACjC,OAAOA,EAAWvC,KAAKwC,cAAcC,SAASrB,EAAYoB,kBAE3D,OAAQjC,EAAOmC,OAGd,yBAAKvC,UAAU,MACd,wBAAIA,UAAU,OAAd,UACA,kBAAC,EAAD,CAAWkB,aAAce,KAAKV,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUnB,OAAQ8B,MANnB,wBAAIlC,UAAU,MAAd,kB,GAxBgBwC,c,MCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SDuHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.51a37d71.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card=({name,email,id})=>{\r\n\t\t\treturn(\r\n\t\t\t<div className='tc bg-light-green grow br3 pa3 ma2 dib bw3 shadow-5'>\r\n\t\t\t<img alt=\"Avatars\"src={`https://robohash.org/set_set5/bgset_bg1/${id}?size=200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\nexport default Card;"," import React from 'react';\r\n import Card from './Card';\r\n // import Avatar from './Avatar';\r\n\r\nconst CardList=({Avatar})=>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\tAvatar.map((user,i)=>{\r\n\t\t\treturn (\r\n\t\t\t\t<Card\r\n\t\t\t\t\t key={i}\r\n\t\t\t\t\t id={Avatar[i].id}\r\n\t\t\t\t\t name={Avatar[i].name}\r\n\t\t\t\t\t email={Avatar[i].email}\r\n\t\t\t\t />\r\n\t\t\t);\t\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t</div>\r\n\t);\r\n}\r\n \r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n\treturn(\r\n\t\t<div style={{overflowY: 'scroll', border: '5px solid black', height:'500px' }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default Scroll;","import React from 'react';\r\nconst SearchBox=(({searchfield,searchChange})=>{\r\n\treturn(\r\n\t\t// className='pa2'\r\n\t\t<div id='box'>\r\n\t\t\t<input \r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue' \r\n\t\t\ttype='search' \r\n\t\t\tplaceholder=\"Search your friends\" \r\n\t\t\tonChange={searchChange}/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n)\r\nexport default SearchBox;","import React,{Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\tAvatar: [], \r\n\t\tsearchfield:''\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t \t.then(response => response.json())\r\n  \t\t.then(json =>{this.setState({Avatar:json})})\r\n  \t}\r\n\r\n\tonSearchChange=(event)=>{\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t\t}\r\n\r\n\trender(){\r\n\t\tconst{Avatar,searchfield}=this.state;\r\n\t\tconst filterAvatar=Avatar.filter(eachAvatar=>{\r\n\t\treturn eachAvatar.name.toLowerCase().includes(searchfield.toLowerCase())\r\n\t\t})\r\n\treturn !Avatar.length ?\r\n\t\t<h1 className='tc'>loading...</h1> :\r\n\t(\r\n\t\t<div className='tc'>\r\n\t\t\t<h1 className='f1 '>ROBOLY</h1>\r\n\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t<CardList Avatar={filterAvatar}/>\r\n\t\t\t</Scroll>\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './containers/App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t<App/>\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}